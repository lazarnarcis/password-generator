{"version":3,"sources":["App.js","index.js"],"names":["App","useState","lengthPassword","setLengthPassword","password","setPassword","alphabet","special","initialValueOfNumbers","includeNumbers","initialValueOfSpecialCharacters","includeSpecial","capsOn","setCapsOn","className","type","name","onChange","defaultChecked","id","htmlFor","e","target","value","onClick","initialString","i","generateALetter","Math","floor","random","length","generateASpecial","generateAnumber","toUpperCase","console","log","generatePassword","title","navigator","clipboard","writeText","alert","ReactDOM","render","document","getElementById"],"mappings":"4KAEe,SAASA,IACpB,MAA4CC,mBAAS,KAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAgCF,mBAAS,gEAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACMC,EAAW,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAChHC,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACvF,EAAgDN,oBAAS,GAAzD,mBAAOO,EAAP,KAA8BC,EAA9B,KACA,EAA0DR,oBAAS,GAAnE,mBAAOS,EAAP,KAAwCC,EAAxC,KACA,EAA4BV,oBAAS,GAArC,mBAAOW,EAAP,KAAeC,EAAf,KA4DA,OACI,sBAAKC,UAAU,MAAf,UACI,2DACA,sBAAKA,UAAU,WAAf,UACI,uBACIC,KAAK,WACLC,KAAK,UACLC,SAAU,WAftBR,GAAgBD,IAgBJU,eAAgBV,EAChBW,GAAG,YAEP,+BAAM,uBAAOC,QAAQ,UAAf,2CAEV,sBAAKN,UAAU,WAAf,UACI,uBACIC,KAAK,WACLC,KAAK,UACLC,SAAU,WAnBtBJ,GAAWD,IAoBCM,eAAgBN,EAChBO,GAAG,aAEP,+BAAM,uBAAOC,QAAQ,WAAf,+CAEV,sBAAKN,UAAU,WAAf,UACI,uBACIC,KAAK,WACLC,KAAK,UACLC,SAAU,WAhCtBN,GAAgBD,IAiCJQ,eAAgBR,EAChBS,GAAG,eAEP,+BAAM,uBAAOC,QAAQ,aAAf,2DAEV,sBAAKN,UAAU,WAAf,UACQ,uBAAOM,QAAQ,SAAf,oCAAsD,uBACtDL,KAAK,SACLE,SAAU,SAAAI,GAAC,OAAIlB,EAAkBkB,EAAEC,OAAOC,QAC1CA,MAAOrB,EACPiB,GAAG,WAEP,+BACI,uBAAOC,QAAQ,SAAf,qCAGR,wBACII,QAAU,kBAlGG,WAErB,IADA,IAAIC,EAAgB,GACXC,EAAI,EAAGA,EAAIxB,EAAgBwB,IAAK,CACrC,IAAIC,EAAkBC,KAAKC,MAAOD,KAAKE,SAAWxB,EAASyB,QACvDC,EAAmBJ,KAAKC,MAAOD,KAAKE,SAAWvB,EAAQwB,QACvDE,EAAkBL,KAAKC,MAAuB,EAAhBD,KAAKE,UAEvC,GAAI5B,EAAiB,GAAKA,EAAiB,GAEvC,YADAG,EAAY,2CAGD,IAAXO,IACAN,EAASqB,GAAmBrB,EAASqB,GAAiBO,gBAE5B,IAA1B1B,IAAuE,IAApCE,EACnCe,GAAiBnB,EAASqB,IACO,IAA1BnB,IAAsE,IAApCE,EAErCe,GADAC,EAAI,EACaO,EAGD,IADFL,KAAKC,MAAuB,EAAhBD,KAAKE,SAAgB,GAE1BvB,EAAQyB,GAER1B,EAASqB,IAGD,IAA1BnB,EAEHiB,GADAC,EAAI,EACaO,EAEA3B,EAASqB,IAEa,IAApCjB,IAEHe,GADAC,EAAI,EACanB,EAAQyB,GAER1B,EAASqB,IAItCtB,EAAYoB,GACZU,QAAQC,IAAR,wCAA6CX,EAAcM,OAA3D,gBAwDwBM,IAChBvB,UAAU,SAFd,+BAMA,oBAAGK,GAAG,qBAAN,iCAA+C,sBAAML,UAAU,gBAAgBwB,MAAM,gBAAgBd,QAAS,kBA3GlHW,QAAQC,IAAIhC,GACZmC,UAAUC,UAAUC,UAAUrC,QAC9BsC,MAAM,2CAyG6C,SAAmFtC,U,MClH9IuC,IAASC,OACL,cAAC5C,EAAD,IACA6C,SAASC,eAAe,W","file":"static/js/main.68d42882.chunk.js","sourcesContent":["import React, { useState } from \"react\" \n\nexport default function App() {\n    const [lengthPassword, setLengthPassword] = useState(\"8\")\n    const [password, setPassword] = useState(\"Click the 'Generate Password' button to generate a password!\")\n    const alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    const special = [\"`\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"^\", \"&\", \"*\", \"(\", \")\", \"-\", \"=\", \"+\"]\n    const [initialValueOfNumbers, includeNumbers] = useState(true);\n    const [initialValueOfSpecialCharacters, includeSpecial] = useState(true)\n    const [capsOn, setCapsOn] = useState(true)\n    \n    const copyPass = () => {\n        console.log(password)\n        navigator.clipboard.writeText(password)\n        alert(\"Password has been copied to clipboard!\")\n    }\n    const generatePassword = () => {\n        let initialString = \"\"\n        for (let i = 0; i < lengthPassword; i++) {\n            let generateALetter = Math.floor((Math.random() * alphabet.length))\n            let generateASpecial = Math.floor((Math.random() * special.length))\n            let generateAnumber = Math.floor((Math.random() * 9))\n\n            if (lengthPassword < 3 || lengthPassword > 50) {\n                setPassword(\"Please enter a number between 3 to 50!\")\n                return\n            }\n            if (capsOn === true) {\n                alphabet[generateALetter] = alphabet[generateALetter].toUpperCase()\n            } \n            if (initialValueOfNumbers === false && initialValueOfSpecialCharacters === false) {\n                initialString += alphabet[generateALetter]\n            } else if (initialValueOfNumbers === true && initialValueOfSpecialCharacters === true) {\n                if (i % 2) {\n                    initialString += generateAnumber\n                } else {\n                    let randomX = Math.floor((Math.random() * 2) + 1)\n                    if (randomX === 1) {\n                        initialString += special[generateASpecial]\n                    } else {\n                        initialString += alphabet[generateALetter]\n                    }\n                }\n            } else if (initialValueOfNumbers === true) {\n                if (i % 2) {\n                    initialString += generateAnumber\n                } else {\n                    initialString += alphabet[generateALetter]\n                }\n            } else if (initialValueOfSpecialCharacters === true) {\n                if (i % 2) {\n                    initialString += special[generateASpecial]\n                } else {\n                    initialString += alphabet[generateALetter]\n                }\n            }\n        }\n        setPassword(initialString)\n        console.log(`Length of password generated: ${initialString.length} characters`)\n    }\n    const setIncludeNumbers = () => {\n        includeNumbers(!initialValueOfNumbers)\n    }\n    const setSpecialCharacters = () => {\n        includeSpecial(!initialValueOfSpecialCharacters)\n    }\n    const updateCaps = () => {\n        setCapsOn(!capsOn)\n    }\n    return (\n        <div className=\"App\">\n            <h1>Random Password Generator</h1>\n            <div className=\"elements\">\n                <input \n                    type=\"checkbox\" \n                    name=\"numbers\"\n                    onChange={() => setIncludeNumbers()} \n                    defaultChecked={initialValueOfNumbers} \n                    id=\"numbers\"\n                />\n                <span><label htmlFor=\"numbers\">Include numbers from 0-9</label></span>\n            </div>\n            <div className=\"elements\">\n                <input \n                    type=\"checkbox\" \n                    name=\"numbers\" \n                    onChange={() => updateCaps()} \n                    defaultChecked={capsOn} \n                    id=\"capslock\"\n                />\n                <span><label htmlFor=\"capslock\">Must contain capital letters</label></span>\n            </div>\n            <div className=\"elements\">\n                <input \n                    type=\"checkbox\" \n                    name=\"special\" \n                    onChange={() => setSpecialCharacters()} \n                    defaultChecked={initialValueOfSpecialCharacters} \n                    id=\"characters\"\n                />\n                <span><label htmlFor=\"characters\">Include special characters (like ~!@#$%)</label></span>\n            </div>\n            <div className=\"elements\">\n                    <label htmlFor=\"length\">The password contains </label><input \n                    type=\"number\"\n                    onChange={e => setLengthPassword(e.target.value)} \n                    value={lengthPassword}\n                    id=\"length\"\n                />\n                <span>\n                    <label htmlFor=\"length\"> characters (3-50)</label>\n                </span>\n            </div>\n            <button\n                onClick={ () => generatePassword() }\n                className=\"button\"\n            >\n                Generate Password\n            </button>\n            <p id=\"text-when-generate\">Password Generated: <span className=\"text-password\" title=\"Click to copy\" onClick={() => copyPass()}>{ password }</span></p>\n        </div>\n    )\n}","import React from \"react\" \nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport \"./App.scss\"\n\nReactDOM.render(\n    <App />,\n    document.getElementById(\"root\")\n)"],"sourceRoot":""}