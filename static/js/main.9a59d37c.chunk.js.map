{"version":3,"sources":["App.js","index.js"],"names":["App","useState","lengthPassword","setLengthPassword","password","setPassword","alphabet","special","initialValueOfNumbers","includeNumbers","initialValueOfSpecialCharacters","includeSpecial","capsOn","setCapsOn","className","type","name","onChange","defaultChecked","id","htmlFor","e","target","value","onClick","initialString","i","generateALetter","Math","floor","random","length","generateASpecial","generateAnumber","toUpperCase","randomX","setTimeout","console","log","generatePassword","title","navigator","clipboard","writeText","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a59d37c.chunk.js","sourcesContent":["import React, { useState } from \"react\"\r\n\r\nexport default function App() {\r\n    const [lengthPassword, setLengthPassword] = useState(\"8\")\r\n    const [password, setPassword] = useState(\"Click the 'Generate Password' button to generate a password!\")\r\n    const alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\r\n    const special = [\"`\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"^\", \"&\", \"*\", \"(\", \")\", \"-\", \"=\", \"+\"]\r\n    const [initialValueOfNumbers, includeNumbers] = useState(true);\r\n    const [initialValueOfSpecialCharacters, includeSpecial] = useState(true)\r\n    const [capsOn, setCapsOn] = useState(true)\r\n    \r\n    const copyPass = () => {\r\n        console.log(`The copied password is: ${password}`)\r\n        navigator.clipboard.writeText(password)\r\n        alert(\"Password has been copied to clipboard!\")\r\n    }\r\n    const generatePassword = () => {\r\n        if (password !== \"loading...\") {\r\n            let initialString = \"\"\r\n            for (let i = 0; i < lengthPassword; i++) {\r\n                let generateALetter = Math.floor((Math.random() * alphabet.length))\r\n                let generateASpecial = Math.floor((Math.random() * special.length))\r\n                let generateAnumber = Math.floor((Math.random() * 9))\r\n                setPassword(\"loading...\")\r\n                if (lengthPassword < 3 || lengthPassword > 50) {\r\n                    return setPassword(\"Please enter a number between 3 to 50!\")\r\n                }\r\n                if (capsOn === true) {\r\n                    alphabet[generateALetter] = alphabet[generateALetter].toUpperCase()\r\n                }\r\n                if (initialValueOfNumbers === false && initialValueOfSpecialCharacters === false) {\r\n                    initialString += alphabet[generateALetter]\r\n                } else if (initialValueOfNumbers === true && initialValueOfSpecialCharacters === true) {\r\n                    if (i % 2) {\r\n                        initialString += generateAnumber\r\n                    } else {\r\n                        let randomX = Math.floor((Math.random() * 2) + 1)\r\n                        if (randomX === 1) {\r\n                            initialString += special[generateASpecial]\r\n                        } else {\r\n                            initialString += alphabet[generateALetter]\r\n                        }\r\n                    }\r\n                } else if (initialValueOfNumbers === true) {\r\n                    if (i % 2) {\r\n                        initialString += generateAnumber\r\n                    } else {\r\n                        initialString += alphabet[generateALetter]\r\n                    }\r\n                } else if (initialValueOfSpecialCharacters === true) {\r\n                    if (i % 2) {\r\n                        initialString += special[generateASpecial]\r\n                    } else {\r\n                        initialString += alphabet[generateALetter]\r\n                    }\r\n                }\r\n            }\r\n            setTimeout(() => {\r\n                setPassword(initialString)\r\n                console.log(`Length of password generated: ${initialString.length} characters`)\r\n            }, 700)\r\n        }\r\n    }\r\n    const setIncludeNumbers = () => {\r\n        includeNumbers(!initialValueOfNumbers)\r\n    }\r\n    const setSpecialCharacters = () => {\r\n        includeSpecial(!initialValueOfSpecialCharacters)\r\n    }\r\n    const updateCaps = () => {\r\n        setCapsOn(!capsOn)\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Random Password Generator</h1>\r\n            <div className=\"elements\">\r\n                <input \r\n                    type=\"checkbox\" \r\n                    name=\"numbers\"\r\n                    onChange={() => setIncludeNumbers()} \r\n                    defaultChecked={initialValueOfNumbers} \r\n                    id=\"numbers\"\r\n                />\r\n                <span><label htmlFor=\"numbers\">Include numbers from 0-9</label></span>\r\n            </div>\r\n            <div className=\"elements\">\r\n                <input \r\n                    type=\"checkbox\" \r\n                    name=\"numbers\" \r\n                    onChange={() => updateCaps()} \r\n                    defaultChecked={capsOn} \r\n                    id=\"capslock\"\r\n                />\r\n                <span><label htmlFor=\"capslock\">Must contain capital letters</label></span>\r\n            </div>\r\n            <div className=\"elements\">\r\n                <input \r\n                    type=\"checkbox\" \r\n                    name=\"special\" \r\n                    onChange={() => setSpecialCharacters()} \r\n                    defaultChecked={initialValueOfSpecialCharacters} \r\n                    id=\"characters\"\r\n                />\r\n                <span><label htmlFor=\"characters\">Include special characters (like ~!@#$%)</label></span>\r\n            </div>\r\n            <div className=\"elements\">\r\n                    <label htmlFor=\"length\">The password contains&nbsp;</label><input \r\n                    type=\"number\" \r\n                    onChange={ e => setLengthPassword(e.target.value) } \r\n                    value={lengthPassword}\r\n                    id=\"length\"\r\n                />\r\n                <span>\r\n                    <label htmlFor=\"length\">&nbsp;characters (3-50)</label>\r\n                </span>\r\n            </div>\r\n            <button\r\n                onClick={ () => generatePassword() }\r\n                className=\"button\"\r\n            >\r\n                Generate Password\r\n            </button>\r\n            <p id=\"text-when-generate\">Password Generated: <span className=\"text-password\" title=\"Click to copy\" onClick={() => copyPass()}>{ password }</span></p>\r\n        </div>\r\n    )\r\n}","import React from \"react\" \nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport \"./App.scss\"\n\nReactDOM.render(\n    <App />,\n    document.getElementById(\"root\")\n)"],"sourceRoot":""}