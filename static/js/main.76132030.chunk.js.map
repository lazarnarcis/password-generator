{"version":3,"sources":["sound-when-generate.mp3","App.js","index.js"],"names":["App","useState","lengthPassword","setLengthPassword","password","setPassword","alphabet","special","initialValueOfNumbers","includeNumbers","initialValueOfSpecialCharacters","includeSpecial","capsOn","setCapsOn","Audio","sound","startSound","className","type","name","onChange","defaultChecked","id","for","e","target","value","onClick","initialString","i","generateALetter","Math","floor","random","length","generateASpecial","generateAnumber","toUpperCase","console","log","play","generatePassword","title","navigator","clipboard","writeText","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.76132030.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sound-when-generate.676dc5b3.mp3\";","import React, { useState } from \"react\" \r\nimport sound from \"./sound-when-generate.mp3\"\r\n\r\nexport default function App() {\r\n    const [lengthPassword, setLengthPassword] = useState(\"8\")\r\n    const [password, setPassword] = useState(\"Click the 'Generate Password' button to generate a password!\")\r\n    const alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\r\n    const special = [\"`\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"^\", \"&\", \"*\", \"(\", \")\", \"-\", \"=\", \"+\"]\r\n    const [initialValueOfNumbers, includeNumbers] = useState(true);\r\n    const [initialValueOfSpecialCharacters, includeSpecial] = useState(true)\r\n    const [capsOn, setCapsOn] = useState(true)\r\n    const [startSound] = useState(new Audio(sound))\r\n\r\n    const copyPass = () => {\r\n        console.log(password)\r\n        navigator.clipboard.writeText(password)\r\n        alert(\"Password has been copied to clipboard!\")\r\n    }\r\n    const generatePassword = () => {\r\n        let initialString = \"\"\r\n        for (let i = 0; i < lengthPassword; i++) {\r\n            let generateALetter = Math.floor((Math.random() * alphabet.length))\r\n            let generateASpecial = Math.floor((Math.random() * special.length))\r\n            let generateAnumber = Math.floor((Math.random() * 9))\r\n\r\n            if (lengthPassword < 3 || lengthPassword > 50) {\r\n                setPassword(\"Please enter a number between 3 to 50!\")\r\n                return\r\n            }\r\n            if (capsOn === true) {\r\n                alphabet[generateALetter] = alphabet[generateALetter].toUpperCase()\r\n            } \r\n            if (initialValueOfNumbers === false && initialValueOfSpecialCharacters === false) {\r\n                initialString += alphabet[generateALetter]\r\n            } else if (initialValueOfNumbers === true && initialValueOfSpecialCharacters === true) {\r\n                if (i % 2) {\r\n                    initialString += generateAnumber\r\n                } else {\r\n                    let randomX = Math.floor((Math.random() * 2) + 1)\r\n                    if (randomX === 1) {\r\n                        initialString += special[generateASpecial]\r\n                    } else {\r\n                        initialString += alphabet[generateALetter]\r\n                    }\r\n                }\r\n            } else if (initialValueOfNumbers === true) {\r\n                if (i % 2) {\r\n                    initialString += generateAnumber\r\n                } else {\r\n                    initialString += alphabet[generateALetter]\r\n                }\r\n            } else if (initialValueOfSpecialCharacters === true) {\r\n                if (i % 2) {\r\n                    initialString += special[generateASpecial]\r\n                } else {\r\n                    initialString += alphabet[generateALetter]\r\n                }\r\n            }\r\n        }\r\n        setPassword(initialString)\r\n        console.log(`Length of password generated: ${initialString.length} characters`)\r\n        startSound.play()\r\n    }\r\n    const setIncludeNumbers = () => {\r\n        includeNumbers(!initialValueOfNumbers)\r\n    }\r\n    const setSpecialCharacters = () => {\r\n        includeSpecial(!initialValueOfSpecialCharacters)\r\n    }\r\n    const updateCaps = () => {\r\n        setCapsOn(!capsOn)\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Random Password Generator</h1>\r\n            <div className=\"elements\">\r\n                <input \r\n                    type=\"checkbox\" \r\n                    name=\"numbers\" \r\n                    onChange={() => setIncludeNumbers()} \r\n                    defaultChecked={initialValueOfNumbers} \r\n                    id=\"numbers\"\r\n                />\r\n                <span><label for=\"numbers\">Include numbers from 0-9</label></span>\r\n            </div>\r\n            <div className=\"elements\">\r\n                <input \r\n                    type=\"checkbox\" \r\n                    name=\"numbers\" \r\n                    onChange={() => updateCaps()} \r\n                    defaultChecked={capsOn} \r\n                    id=\"capslock\"\r\n                />\r\n                <span><label for=\"capslock\">Must contain capital letters</label></span>\r\n            </div>\r\n            <div className=\"elements\">\r\n                <input \r\n                    type=\"checkbox\" \r\n                    name=\"special\" \r\n                    onChange={() => setSpecialCharacters()} \r\n                    defaultChecked={initialValueOfSpecialCharacters} \r\n                    id=\"characters\"\r\n                />\r\n                <span><label for=\"characters\">Include special characters (like ~!@#$%)</label></span>\r\n            </div>\r\n            <div className=\"elements\">\r\n                    <label for=\"length\">The password contains </label><input \r\n                    type=\"number\" \r\n                    onChange={ e => setLengthPassword(e.target.value) } \r\n                    value={lengthPassword}\r\n                    id=\"length\"\r\n                />\r\n                <span>\r\n                    <label for=\"length\"> characters (3-50)</label>\r\n                </span>\r\n            </div>\r\n            <button\r\n                onClick={ () => generatePassword() }\r\n                className=\"button\"\r\n            >\r\n                Generate Password\r\n            </button>\r\n            <p id=\"text-when-generate\">Password Generated: <p className=\"text-password\" title=\"Click to copy\" onClick={() => copyPass()}>{ password }</p></p>\r\n        </div>\r\n    )\r\n}","import React from \"react\" \r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"./App\"\r\nimport \"./App.scss\"\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById(\"root\")\r\n)"],"sourceRoot":""}