{"version":3,"sources":["App.js","index.js"],"names":["App","useState","lengthPassword","setLengthPassword","password","setPassword","alphabet","special","initialValueOfNumbers","includeNumbers","initialValueOfSpecialCharacters","includeSpecial","capsOn","setCapsOn","className","type","name","onChange","defaultChecked","e","target","value","onClick","initialString","i","generateALetter","Math","floor","random","length","generateASpecial","generateAnumber","toUpperCase","console","log","generatePassword","title","navigator","clipboard","writeText","alert","ReactDOM","render","document","getElementById"],"mappings":"4KAEe,SAASA,IACpB,MAA4CC,mBAAS,KAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAgCF,mBAAS,wCAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACMC,EAAW,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAChHC,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACvF,EAAgDN,oBAAS,GAAzD,mBAAOO,EAAP,KAA8BC,EAA9B,KACA,EAA0DR,oBAAS,GAAnE,mBAAOS,EAAP,KAAwCC,EAAxC,KACA,EAA4BV,oBAAS,GAArC,mBAAOW,EAAP,KAAeC,EAAf,KA4DA,OACI,sBAAKC,UAAU,MAAf,UACI,2DACA,sBAAKA,UAAU,WAAf,UACI,uBACIC,KAAK,WACLC,KAAK,UACLC,SAAU,WAftBR,GAAgBD,IAgBJU,eAAgBV,IAEpB,+DAEJ,sBAAKM,UAAU,WAAf,UACI,uBACIC,KAAK,WACLC,KAAK,UACLC,SAAU,WAlBtBJ,GAAWD,IAmBCM,eAAgBN,IAEpB,mEAEJ,sBAAKE,UAAU,WAAf,UACI,uBACIC,KAAK,WACLC,KAAK,UACLC,SAAU,WA9BtBN,GAAgBD,IA+BJQ,eAAgBR,IAEpB,+EAEJ,sBAAKI,UAAU,WAAf,UACI,uBACIC,KAAK,SACLE,SAAW,SAAAE,GAAC,OAAIhB,EAAkBgB,EAAEC,OAAOC,QAC3CA,MAAOnB,IAEX,iEAIJ,wBACIoB,QAAU,kBA9FG,WAErB,IADA,IAAIC,EAAgB,GACXC,EAAI,EAAGA,EAAItB,EAAgBsB,IAAK,CACrC,IAAIC,EAAkBC,KAAKC,MAAOD,KAAKE,SAAWtB,EAASuB,QACvDC,EAAmBJ,KAAKC,MAAOD,KAAKE,SAAWrB,EAAQsB,QACvDE,EAAkBL,KAAKC,MAAuB,EAAhBD,KAAKE,UAEvC,GAAI1B,EAAiB,GAAKA,EAAiB,GAEvC,YADAG,EAAY,2CAGD,IAAXO,IACAN,EAASmB,GAAmBnB,EAASmB,GAAiBO,gBAE5B,IAA1BxB,IAAuE,IAApCE,EACnCa,GAAiBjB,EAASmB,IACO,IAA1BjB,IAAsE,IAApCE,EAErCa,GADAC,EAAI,EACaO,EAGD,IADFL,KAAKC,MAAuB,EAAhBD,KAAKE,SAAgB,GAE1BrB,EAAQuB,GAERxB,EAASmB,IAGD,IAA1BjB,EAEHe,GADAC,EAAI,EACaO,EAEAzB,EAASmB,IAEa,IAApCf,IAEHa,GADAC,EAAI,EACajB,EAAQuB,GAERxB,EAASmB,IAItCpB,EAAYkB,GACZU,QAAQC,IAAR,wCAA6CX,EAAcM,OAA3D,gBAoDwBM,IAChBrB,UAAU,SAFd,+BAMA,qDAAuB,sBAAMA,UAAU,gBAAgBsB,MAAM,gBAAgBd,QAAS,kBAvG1FW,QAAQC,IAAI9B,GACZiC,UAAUC,UAAUC,UAAUnC,QAC9BoC,MAAM,2CAqGqB,SAAmFpC,U,MC9GtHqC,IAASC,OACL,cAAC1C,EAAD,IACA2C,SAASC,eAAe,W","file":"static/js/main.a3bc1282.chunk.js","sourcesContent":["import React, { useState } from \"react\" \r\n\r\nexport default function App() {\r\n    const [lengthPassword, setLengthPassword] = useState(\"8\")\r\n    const [password, setPassword] = useState(\"Click button to generate a password!\")\r\n    const alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\r\n    const special = [\"`\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"^\", \"&\", \"*\", \"(\", \")\", \"-\", \"=\", \"+\"]\r\n    const [initialValueOfNumbers, includeNumbers] = useState(true);\r\n    const [initialValueOfSpecialCharacters, includeSpecial] = useState(true)\r\n    const [capsOn, setCapsOn] = useState(true)\r\n\r\n    const copyPass = () => {\r\n        console.log(password)\r\n        navigator.clipboard.writeText(password)\r\n        alert(\"Password has been copied to clipboard!\")\r\n    }\r\n    const generatePassword = () => {\r\n        let initialString = \"\"\r\n        for (let i = 0; i < lengthPassword; i++) {\r\n            let generateALetter = Math.floor((Math.random() * alphabet.length))\r\n            let generateASpecial = Math.floor((Math.random() * special.length))\r\n            let generateAnumber = Math.floor((Math.random() * 9))\r\n\r\n            if (lengthPassword < 3 || lengthPassword > 50) {\r\n                setPassword(\"Please enter a number between 3 to 50!\")\r\n                return\r\n            }\r\n            if (capsOn === true) {\r\n                alphabet[generateALetter] = alphabet[generateALetter].toUpperCase()\r\n            } \r\n            if (initialValueOfNumbers === false && initialValueOfSpecialCharacters === false) {\r\n                initialString += alphabet[generateALetter]\r\n            } else if (initialValueOfNumbers === true && initialValueOfSpecialCharacters === true) {\r\n                if (i % 2) {\r\n                    initialString += generateAnumber\r\n                } else {\r\n                    let randomX = Math.floor((Math.random() * 2) + 1)\r\n                    if (randomX === 1) {\r\n                        initialString += special[generateASpecial]\r\n                    } else {\r\n                        initialString += alphabet[generateALetter]\r\n                    }\r\n                }\r\n            } else if (initialValueOfNumbers === true) {\r\n                if (i % 2) {\r\n                    initialString += generateAnumber\r\n                } else {\r\n                    initialString += alphabet[generateALetter]\r\n                }\r\n            } else if (initialValueOfSpecialCharacters === true) {\r\n                if (i % 2) {\r\n                    initialString += special[generateASpecial]\r\n                } else {\r\n                    initialString += alphabet[generateALetter]\r\n                }\r\n            }\r\n        }\r\n        setPassword(initialString)\r\n        console.log(`Length of password generated: ${initialString.length} characters`)\r\n    }\r\n    const setIncludeNumbers = () => {\r\n        includeNumbers(!initialValueOfNumbers)\r\n    }\r\n    const setSpecialCharacters = () => {\r\n        includeSpecial(!initialValueOfSpecialCharacters)\r\n    }\r\n    const updateCaps = () => {\r\n        setCapsOn(!capsOn)\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Random Password Generator</h1>\r\n            <div className=\"elements\">\r\n                <input \r\n                    type=\"checkbox\" \r\n                    name=\"numbers\" \r\n                    onChange={() => setIncludeNumbers()} \r\n                    defaultChecked={initialValueOfNumbers} \r\n                />\r\n                <span>Include numbers from 0-9</span>\r\n            </div>\r\n            <div className=\"elements\">\r\n                <input \r\n                    type=\"checkbox\" \r\n                    name=\"numbers\" \r\n                    onChange={() => updateCaps()} \r\n                    defaultChecked={capsOn} \r\n                />\r\n                <span>Must contain capital letters</span>\r\n            </div>\r\n            <div className=\"elements\">\r\n                <input \r\n                    type=\"checkbox\" \r\n                    name=\"special\" \r\n                    onChange={() => setSpecialCharacters()} \r\n                    defaultChecked={initialValueOfSpecialCharacters} \r\n                />\r\n                <span>Include special characters (like ~!@#$%)</span>\r\n            </div>\r\n            <div className=\"elements\">\r\n                <input \r\n                    type=\"number\" \r\n                    onChange={ e => setLengthPassword(e.target.value) } \r\n                    value={lengthPassword}\r\n                />\r\n                <span>\r\n                    Letters of password (4-15)\r\n                </span>\r\n            </div>\r\n            <button\r\n                onClick={ () => generatePassword() }\r\n                className=\"button\"\r\n            >\r\n                Generate Password\r\n            </button>\r\n            <p>Password Generated: <span className=\"text-password\" title=\"Click to copy\" onClick={() => copyPass()}>{ password }</span></p>\r\n        </div>\r\n    )\r\n}","import React from \"react\" \r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"./App\"\r\nimport \"./App.scss\"\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById(\"root\")\r\n)"],"sourceRoot":""}